crystal_doc_search_index_callback({"repository_name":"Lens","body":"# lens\n\nA multiformat internationalization (i18n) shard for Crystal.\n\nThere is no doubt that the crystal community lacks many essential features that most modern day languages have; one of which is internationalization. Lens is an attempt to fix that.\n\n## Getting started \nLens supports numerous different formats:\n* GNU Gettext (`Gettext::POBackend`, `Gettext::MOBackend `)\n    * You can use both .po and .mo\n* Crystal-i18n (`CrystalI18n::I18n`)\n    * Stored under .yml\n* More coming soon\n\nTo get started, you should select one that fits your needs the best. [See here for information regarding them.](https://docs.weblate.org/en/latest/formats.html#l)\n\nEach backend can then be initialized with the locale directory\n```crystal\nbackend = Gettext::MOBackend.new(\"locales\")\n```\n\nEach backend also supports nested directories and multiple files of the same language.\n\n## GNU Gettext\nThe GNU project's implementation of Gettext\n```crystal\nbackend = Gettext::MOBackend.new(\"locales\")\ncatalogue_hash = backend.create() # => LanguageCode|| Filename => Catalogue \ncatalogue = catalogue_hash[\"en_US\"]\n```\n\nFor detailed information regarding usage please refer to the actual API documentation. A brief overview of the functionality is present below.\n\n\n#### Basic usage\nMessages are fetched with the `gettext` method. If it doesn't exist then the given ID would be returned.\n```crystal\ncatalogue.gettext(\"A message\")     # => \"Translated message\"\ncatalogue.gettext(\"I don't exist\") # => \"I don't exist\"\n```\n\n#### Pluralization\nPluralization is done through the `ngettext` method. The given number is parsed through the C expression from the Plural-Forms header to know which plural-form to use.\n\n```crystal\ncatalogue.ngettext(\"I have %d apple\", \"I have %d apples\", 0) # => \"Translated I have %d apple\"\ncatalogue.ngettext(\"I have %d apple\", \"I have %d apples\", 1) # => \"Translated I have %d apples\"\n```\n\n#### Context\nKey can be constrained by a specific context and is accessed through the pgettext method.\n```crystal\ncatalogue.pgettext(\"CopyPasteMenu\", \"copy\")          # => \"Translated copy\"\ncatalogue.pgettext(\"CopyPasteMenu\", \"I don't exist\") # => \"I don't exist\"\n```\n\n#### Context with pluralization\nContext-constrained messages can also have plural-forms and is accessed through the `npgettext` method\n```crystal\ncatalogue.npgettext(\"CopyPasteMenu\", \"Export %d file\", \"Export %d files\", 0) # => \"Translated message with plural-form 1\"\ncatalogue.npgettext(\"CopyPasteMenu\", \"Export %d file\", \"Export %d files\", 1) # => \"Translated message with plural-form 0\"\n```\n\n## Crystal-i18n\nIs a format based on ruby-yml similar to what many others in the crystal community has implemented.\n```crystal\n# The backend is the catalogue in the case of crystal-i18n\ncatalogue = CrystalI18n::I18n.new(\"locales\")\n```\n\nEach file should be named like `language-code.yml`\n\nFor detailed information regarding usage please refer to the actual API documentation. A brief overview of the functionality is present below.\n\n#### Basic usage\n```crystal\ncatalogue.translate(\"en\", \"translation\") # => \"Translated Message\"\n```\n\nNested keys can be accessed by separating routes with `.`\n\n```crystal\ncatalogue.translate(\"en\", \"nested_key.forth.forth-third.forth-third-fifth.4344\")\n```\n\n\n#### Pluralization\n```crystal\ncatalogue.translate(\"en\", \"possessions.fruits.apples\", 50) # => \"I have 50 apples\"\ncatalogue.translate(\"en\", \"possessions.fruits.apples\", 1)  # => \"I have 1 apple\"\n```\n\nPlural-rules follows CLDR and is pre-defined in lens for many languages. If your language isn't included in lens you many define (or even overwrite) a new plural-rule through the `CrystalI18n.define_rule` method\n\n```crystal\n  CrystalI18n.define_rule(\"ar\", ->(n : Int32 | Int64 | Float64) {\n  case\n  when n == 0             then \"zero\"\n  when n == 1             then \"one\"\n  when n == 2             then \"two\"\n  when 3..10 === n % 100  then \"few\"\n  when 11..99 === n % 100 then \"many\"\n  else                         \"other\"\n  end\n})\n```\n\n\n#### Interpolation\nInterpolation is done through keyword arguments in the `#translate` method\n```crystal\n# message is 'Hello there, my name is %{name} and I'm a %{profession}`.\nresult = catalogue.translate(\"en\", \"introduction.messages\", name: \"Steve\", profession: \"programmer\")\nresult # => \"Hello there, my name is Steve and I'm a programmer\"\n```\n\n#### Iteration\nIf the value at the given path (key) turns out to be an array then you can pass in the iter argument to select a specific value at the given index\n\n```crystal\ncatalogue.translate(\"en\", \"items.foods\", iter: 2) # => \"Hamburger\"\n```\n\n## API documentation\n[Here](https://syeopite.github.io/lens/index.html)\n\n## Installation\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     lens:\n       github: syeopite/lens\n   ```\n\n2. Run `shards install`\n\n## Contributing\n\n1. Fork it (<https://github.com/syeopite/lens/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [syeopite](https://github.com/syeopite) - creator and maintainer\n\n## Inspirations\n* [omarroth/gettext.cr](https://github.com/omarroth/gettext.cr)\n* [TechMagister/i18n.cr](https://github.com/TechMagister/i18n.cr)\n* [crystal-i18n/i18n](https://github.com/crystal-i18n/i18n)\n","program":{"html_id":"Lens/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"Lens","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Lens/CrystalI18n","path":"CrystalI18n.html","kind":"module","full_name":"CrystalI18n","name":"CrystalI18n","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":16,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L16"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Namespace for logic relating to the crystal-i18n format.\n\nThis is a reimplementation of the crystal-i18n format from the following projects:\n* [TechMagister/i18n.cr](https://github.com/TechMagister/i18n)\n* [crystal-i18n/i18n](https://github.com/crystal-i18n/i18n)\n\nand any of the other similar implementations the community has made.\n\nNote that this is still experimental, mainly in regards to plural-forms. Other than that, it should be\nfully usable and accurate.\n","summary":"<p>Namespace for logic relating to the crystal-i18n format.</p>\n<p><span class=\"flag lime\">EXPERIMENTAL</span> </p>","class_methods":[{"html_id":"define_rule(locale:String,value:Int32|Int64|Float64->String)-class-method","name":"define_rule","doc":"Set pluralization rules for the given locale\n\nThis allows you to overwrite or even define new pluralization rules\nfor whatever locale you desire.\n\n```\nCrystalI18n.define_rule(\"ar\", ->(n : Int32 | Int64 | Float64) {\n  case\n  when n == 0             then \"zero\"\n  when n == 1             then \"one\"\n  when n == 2             then \"two\"\n  when 3..10 === n % 100  then \"few\"\n  when 11..99 === n % 100 then \"many\"\n  else                         \"other\"\n  end\n})\n```","summary":"<p>Set pluralization rules for the given locale</p>","abstract":false,"args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"(Int32 | Int64 | Float64 -> String)"}],"args_string":"(locale : String, value : Int32 | Int64 | Float64 -> String)","args_html":"(locale : String, value : Int32 | Int64 | Float64 -> String)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":223,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L223"},"def":{"name":"define_rule","args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"(Int32 | Int64 | Float64 -> String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"PluralRulesCollection::Rules[locale] = value"}},{"html_id":"plural_rules:Hash(String,Int32|Int64|Float64->String)-class-method","name":"plural_rules","doc":"Returns all defined CLDR plural rules","summary":"<p>Returns all defined CLDR plural rules</p>","abstract":false,"args":[],"args_string":" : Hash(String, Int32 | Int64 | Float64 -> String)","args_html":" : Hash(String, Int32 | Int64 | Float64 -> String)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":228,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L228"},"def":{"name":"plural_rules","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash((String, Int32 | Int64 | Float64 -> String))","visibility":"Public","body":"return PluralRulesCollection::Rules"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Lens/CrystalI18n/I18n","path":"CrystalI18n/I18n.html","kind":"class","full_name":"CrystalI18n::I18n","name":"I18n","abstract":false,"superclass":{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":22,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L22"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/CrystalI18n","kind":"module","full_name":"CrystalI18n","name":"CrystalI18n"},"doc":"Backend for the crystal-i18n format. This class contains methods to parse and interact with them\n\nNote that this is still experimental, mainly in regards to plural-forms. Other than that, it should be\nfully usable and accurate.","summary":"<p>Backend for the crystal-i18n format.</p>\n<p><span class=\"flag lime\">EXPERIMENTAL</span> </p>","class_methods":[],"constructors":[{"html_id":"new(locale_directory_path:String,reference_locale:String=\"en\")-class-method","name":"new","doc":"Creates a new crystal-i18n instance that reads from the given locale directory path.\n\n```\nCrystalI18n::I18n.new(\"locales\")\n```","summary":"<p>Creates a new crystal-i18n instance that reads from the given locale directory path.</p>","abstract":false,"args":[{"name":"locale_directory_path","doc":null,"default_value":"","external_name":"locale_directory_path","restriction":"String"},{"name":"reference_locale","doc":null,"default_value":"\"en\"","external_name":"reference_locale","restriction":"String"}],"args_string":"(locale_directory_path : String, reference_locale : String = \"en\")","args_html":"(locale_directory_path : String, reference_locale : String = <span class=\"s\">&quot;en&quot;</span>)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":28,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L28"},"def":{"name":"new","args":[{"name":"locale_directory_path","doc":null,"default_value":"","external_name":"locale_directory_path","restriction":"String"},{"name":"reference_locale","doc":null,"default_value":"\"en\"","external_name":"reference_locale","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(locale_directory_path, reference_locale)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"create-instance-method","name":"create","doc":"Returns self | Here for compatibility with `Gettext::MOBackend` and `Gettext::POBackend`\n\ncatalogue = CrystalI18n::I18n.new(\"locales\")\ncatalogue == catalogue.create() # => true","summary":"<p>Returns self | Here for compatibility with <code><a href=\"../Gettext/MOBackend.html\">Gettext::MOBackend</a></code> and <code><a href=\"../Gettext/POBackend.html\">Gettext::POBackend</a></code></p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":155,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L155"},"def":{"name":"create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return self"}},{"html_id":"define_rule(locale:String,value:Int32|Int64|Float64->String)-instance-method","name":"define_rule","doc":"Set pluralization rules for the given locale.\nSee `CrystalI18n.define_rule` for more information","summary":"<p>Set pluralization rules for the given locale.</p>","abstract":false,"args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"(Int32 | Int64 | Float64 -> String)"}],"args_string":"(locale : String, value : Int32 | Int64 | Float64 -> String)","args_html":"(locale : String, value : Int32 | Int64 | Float64 -> String)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":142,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L142"},"def":{"name":"define_rule","args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"(Int32 | Int64 | Float64 -> String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"CrystalI18n.define_rule(locale, value)"}},{"html_id":"plural_rules:Hash(String,Int32|Int64|Float64->String)-instance-method","name":"plural_rules","doc":"Returns all defined CLDR plural rules.","summary":"<p>Returns all defined CLDR plural rules.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Int32 | Int64 | Float64 -> String)","args_html":" : Hash(String, Int32 | Int64 | Float64 -> String)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":147,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L147"},"def":{"name":"plural_rules","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash((String, Int32 | Int64 | Float64 -> String))","visibility":"Public","body":"return PluralRulesCollection::Rules"}},{"html_id":"select(locale)-instance-method","name":"select","doc":"Selects a locale to use for translations\n\nRaises a KeyError when the selected locale isn't found.\n\nIf your application is monolingual then this along with `#translate(key, count, iter)` is your friend.\nHowever, if you need to switch languages on the fly then this method should be ignored.\n\nInstead, you should use the `#translate(locale, key, count, iter)` overload, which allows for fetching\nmessages from any locales without changing the state of the instance.\n\n```\ncatalogue = CrystalI18n::I18n.new(\"locales\")\n\ncatalogue.select(\"en\")\ncatalogue.translate(\"translation\") # => \"Translated Message\"\n\ncatalogue.select(\"example\")\ncatalogue.translate(\"translation\") # => \"Some message in another language\"\n\ncatalogue.select(\"doesn'texist\")\ncatalogue.translate(\"translation\") # => \"Some message in another language\"\n```\n","summary":"<p>Selects a locale to use for translations</p>","abstract":false,"args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":""}],"args_string":"(locale)","args_html":"(locale)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":82,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L82"},"def":{"name":"select","args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @_source.has_key?(locale)\n  @lang_state = locale\nelse\n  raise(KeyError.new(\"The #{locale} doesn't exist\"))\nend"}},{"html_id":"translate(key:String,count:Int|Float?=nil,iter:Int?=nil,**kwargs)-instance-method","name":"translate","doc":"Fetches a translation from the *selected* locale with the given path (key).\n\nFunctionality is the same as `CrystalI18n::I18n.translate(locale : String, key : String, count : Int | Float? = nil, iter : Int? = nil)`\nbut with the first argument removed","summary":"<p>Fetches a translation from the <em>selected</em> locale with the given path (key).</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":"Int | Float | ::Nil"},{"name":"iter","doc":null,"default_value":"nil","external_name":"iter","restriction":"Int | ::Nil"}],"args_string":"(key : String, count : Int | Float? = nil, iter : Int? = nil, **kwargs)","args_html":"(key : String, count : Int | Float? = <span class=\"n\">nil</span>, iter : Int? = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":94,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L94"},"def":{"name":"translate","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":"Int | Float | ::Nil"},{"name":"iter","doc":null,"default_value":"nil","external_name":"iter","restriction":"Int | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.translate(@lang_state, key, count, iter, **kwargs)"}},{"html_id":"translate(locale:String,key:String,count:Int|Float?=nil,iter:Int?=nil,**kwargs)-instance-method","name":"translate","doc":"Fetches a translation from the *given* locale with the given path (key).\n\nBasic usage is this:\n```\ncatalogue = CrystalI18n::I18n.new(\"locales\")\ncatalogue.translate(\"en\", \"translation\") # => \"Translated Message\"\n```\n\nThis method can also translate plural-forms through the count argument.\n```\ncatalogue.translate(\"en\", \"possessions.fruits.apples\", 50) # => \"I have 50 apples\"\ncatalogue.translate(\"en\", \"possessions.fruits.apples\", 1)  # => \"I have 1 apple\"\n```\n\nInterpolation can be done through kwargs.\n```\n# message is 'Hello there, my name is %{name} and I'm a %{profession}`.\nresult = catalogue.translate(\"en\", \"introduction.messages\", name: \"Steve\", profession: \"programmer\")\nresult # => \"Hello there, my name is Steve and I'm a programmer\"\n```\n\nIf the value at the given path (key) turns out to be an array then you can pass in the iter argument\nto select a specific value at the given index\n```\ncatalogue.translate(\"en\", \"items.foods\", iter: 2) # => \"Hamburger\"\n```\n\nWhen a translation is not found `LensExceptions::MissingTranslation` would be raised.\n","summary":"<p>Fetches a translation from the <em>given</em> locale with the given path (key).</p>","abstract":false,"args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":"Int | Float | ::Nil"},{"name":"iter","doc":null,"default_value":"nil","external_name":"iter","restriction":"Int | ::Nil"}],"args_string":"(locale : String, key : String, count : Int | Float? = nil, iter : Int? = nil, **kwargs)","args_html":"(locale : String, key : String, count : Int | Float? = <span class=\"n\">nil</span>, iter : Int? = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/backend/crystal-i18n/crystal-i18n.cr","line_number":127,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/crystal-i18n/crystal-i18n.cr#L127"},"def":{"name":"translate","args":[{"name":"locale","doc":null,"default_value":"","external_name":"locale","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":"Int | Float | ::Nil"},{"name":"iter","doc":null,"default_value":"nil","external_name":"iter","restriction":"Int | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  self.internal_translate(locale, key, count, iter, **kwargs)\nrescue ex : KeyError | Exception\n  if ex.is_a?(KeyError)\n    raise(LensExceptions::MissingTranslation.new(\"Translation in the path '#{key}' does not exist for #{locale} locale\"))\n  else\n    if ex.message == \"Expected Array or Hash, not String\"\n      raise(LensExceptions::MissingTranslation.new(\"One of the routes given in the path: '#{key}' for the '#{locale}' locale leads to a dead end. \" + \"Please make sure the path to the locale key is correct.\"))\n    else\n      raise(ex)\n    end\n  end\nend"}}],"macros":[],"types":[]}]},{"html_id":"Lens/Gettext","path":"Gettext.html","kind":"module","full_name":"Gettext","name":"Gettext","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/backend/gettext/gettext.cr","line_number":11,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L11"},{"filename":"src/backend/gettext/mo/backend.cr","line_number":1,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/mo/backend.cr#L1"},{"filename":"src/backend/gettext/plural-forms/ast.cr","line_number":1,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/ast.cr#L1"},{"filename":"src/backend/gettext/plural-forms/interpreter.cr","line_number":3,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/interpreter.cr#L3"},{"filename":"src/backend/gettext/plural-forms/lexer.cr","line_number":1,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/lexer.cr#L1"},{"filename":"src/backend/gettext/plural-forms/parser.cr","line_number":3,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/parser.cr#L3"},{"filename":"src/backend/gettext/plural-forms/tokens.cr","line_number":1,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/tokens.cr#L1"},{"filename":"src/backend/gettext/po/backend.cr","line_number":1,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/backend.cr#L1"},{"filename":"src/backend/gettext/po/parser.cr","line_number":1,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/parser.cr#L1"},{"filename":"src/backend/gettext/po/scanner.cr","line_number":3,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/scanner.cr#L3"},{"filename":"src/backend/gettext/po/tokens.cr","line_number":1,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/tokens.cr#L1"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"Lens/Gettext","kind":"module","full_name":"Gettext","name":"Gettext"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"Namespace for logic relating to the [GNU Gettext](https://www.gnu.org/software/gettext/) format\n\nGettext is typically separated into two files: `.po` and `.mo`. Both of these formats are fully supported\nby Lens with either the `Gettext::MOBackend` or `Gettext::POBackend` backends.\n\nFor more information, please see their respective documentations.\n\nAll functionality (except flags) of Gettext are implemented.","summary":"<p>Namespace for logic relating to the <a href=\"https://www.gnu.org/software/gettext/\">GNU Gettext</a> format</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Lens/Gettext/Catalogue","path":"Gettext/Catalogue.html","kind":"struct","full_name":"Gettext::Catalogue","name":"Catalogue","abstract":false,"superclass":{"html_id":"Lens/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"Lens/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"Lens/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/gettext/gettext.cr","line_number":18,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L18"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Gettext","kind":"module","full_name":"Gettext","name":"Gettext"},"doc":"Gettext message catalogue. Contains methods for handling translations\n\nYou **should not** be manually creating an instance of this class! Instead let the Gettext backends\ndo it for you! See `Gettext::MOBackend` and `Gettext::POBackend`","summary":"<p>Gettext message catalogue.</p>","class_methods":[],"constructors":[{"html_id":"new(contents:Hash(String,Hash(Int8,String)))-class-method","name":"new","doc":"Creates a message catalogue from parsed Gettext data","summary":"<p>Creates a message catalogue from parsed Gettext data</p>","abstract":false,"args":[{"name":"contents","doc":null,"default_value":"","external_name":"contents","restriction":"Hash(String, Hash(Int8, String))"}],"args_string":"(contents : Hash(String, Hash(Int8, String)))","args_html":"(contents : Hash(String, Hash(Int8, String)))","location":{"filename":"src/backend/gettext/gettext.cr","line_number":40,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L40"},"def":{"name":"new","args":[{"name":"contents","doc":null,"default_value":"","external_name":"contents","restriction":"Hash(String, Hash(Int8, String))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(contents)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"contents:Hash(String,Hash(Int8,String))-instance-method","name":"contents","doc":"Returns all messages within the catalogue\n\nYou should **never** have to deal with this method under normal circumstances.\nPlease use the `#gettext` family of methods to translate your application instead.\n\n```\ncatalogue = Gettext::MOBackend.new(\"examples\").create[\"en-US\"]\ncatalogue.contents # => {...}\n```","summary":"<p>Returns all messages within the catalogue</p>","abstract":false,"args":[],"args_string":" : Hash(String, Hash(Int8, String))","args_html":" : Hash(String, Hash(Int8, String))","location":{"filename":"src/backend/gettext/gettext.cr","line_number":37,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L37"},"def":{"name":"contents","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Hash(Int8, String))","visibility":"Public","body":"@contents"}},{"html_id":"gettext(id:String)-instance-method","name":"gettext","doc":"Fetches the translated message for the specific ID. If none can be found the given ID is returned.\n\n```\ncatalogue = Gettext::MOBackend.new(\"examples\").create[\"en_US\"]\ncatalogue.gettext(\"A message\")     # => \"Translated message\"\ncatalogue.gettext(\"I don't exist\") # => \"I don't exist\"\n```","summary":"<p>Fetches the translated message for the specific ID.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : String)","location":{"filename":"src/backend/gettext/gettext.cr","line_number":72,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L72"},"def":{"name":"gettext","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  return @contents[id][0]\nrescue KeyError\n  return id\nend"}},{"html_id":"headers:Hash(String,String)-instance-method","name":"headers","doc":"Returns a hash of the headers\n\n```\ncatalogue = Gettext::MOBackend.new(\"examples\").create[\"en_US\"]\ncatalogue.headers[\"Plural-Forms\"] # => \"nplurals=2; plural=(n != 1);\"\n```","summary":"<p>Returns a hash of the headers</p>","abstract":false,"args":[],"args_string":" : Hash(String, String)","args_html":" : Hash(String, String)","location":{"filename":"src/backend/gettext/gettext.cr","line_number":25,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L25"},"def":{"name":"headers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, String)","visibility":"Public","body":"@headers"}},{"html_id":"ngettext(id:String,plural_id,n)-instance-method","name":"ngettext","doc":"Fetches the translated message for the specific ID with the correct plural form. Returns either the singular or plural id if none can be found.\n\n```\ncatalogue = Gettext::MOBackend.new(\"examples\").create[\"en_US\"]\ncatalogue.ngettext(\"I have %d apple\", \"I have %d apples\", 0) # => \"Translated message with plural-form 1\"\ncatalogue.ngettext(\"I have %d apple\", \"I have %d apples\", 1) # => \"Translated message with plural-form 0\"\n\n# Not found:\ncatalogue.ngettext(\"I have %d pear\", \"I have %d pears\", 0) # => \"I have %d pears\"\ncatalogue.ngettext(\"I have %d pear\", \"I have %d pears\", 1) # => \"I have %d pear\"\n```","summary":"<p>Fetches the translated message for the specific ID with the correct plural form.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"plural_id","doc":null,"default_value":"","external_name":"plural_id","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(id : String, plural_id, n)","args_html":"(id : String, plural_id, n)","location":{"filename":"src/backend/gettext/gettext.cr","line_number":91,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L91"},"def":{"name":"ngettext","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"plural_id","doc":null,"default_value":"","external_name":"plural_id","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @plural_interpreter.nil?\n  return id\nend\nbegin\n  return @contents[id][self.process_plural(n)]\nrescue KeyError\n  if n == 0\n    return id\n  else\n    return plural_id\n  end\nend\n"}},{"html_id":"npgettext(context,id,plural_id,n)-instance-method","name":"npgettext","doc":"Fetches the translated message for the specific ID that is bound by context with the correct plural form.\n\n```\ncatalogue = Gettext::MOBackend.new(\"examples\").create[\"en_US\"]\ncatalogue.npgettext(\"CopyPasteMenu\", \"Export %d file\", \"Export %d files\", 0) # => \"Translated message with plural-form 1\"\ncatalogue.npgettext(\"CopyPasteMenu\", \"Export %d file\", \"Export %d files\", 1) # => \"Translated message with plural-form 0\"\n\n# Not found:\ncatalogue.npgettext(\"CopyPasteMenu\", \"None\", \"NonePlural\", 0) # => \"NonePlural\"\ncatalogue.npgettext(\"CopyPasteMenu\", \"None\", \"NonePlural\", 1) # => \"None\"\n```","summary":"<p>Fetches the translated message for the specific ID that is bound by context with the correct plural form.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"plural_id","doc":null,"default_value":"","external_name":"plural_id","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(context, id, plural_id, n)","args_html":"(context, id, plural_id, n)","location":{"filename":"src/backend/gettext/gettext.cr","line_number":134,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L134"},"def":{"name":"npgettext","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""},{"name":"plural_id","doc":null,"default_value":"","external_name":"plural_id","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @plural_interpreter.nil?\n  return id\nend\nbegin\n  return @contents[\"#{context}\\u0004#{id}\"][self.process_plural(n)]\nrescue KeyError\n  if n == 0\n    return id\n  else\n    return plural_id\n  end\nend\n"}},{"html_id":"pgettext(context,id)-instance-method","name":"pgettext","doc":"Fetches the translated message for the specific ID that is bound by context. If none can be found the given ID is returned.\n\n```\ncatalogue = Gettext::MOBackend.new(\"examples\").create[\"en_US\"]\n\ncatalogue.pgettext(\"CopyPasteMenu\", \"copy\")          # => \"Translated copy\"\ncatalogue.pgettext(\"CopyPasteMenu\", \"I don't exist\") # => \"I don't exist\"\n```","summary":"<p>Fetches the translated message for the specific ID that is bound by context.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(context, id)","args_html":"(context, id)","location":{"filename":"src/backend/gettext/gettext.cr","line_number":115,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/gettext.cr#L115"},"def":{"name":"pgettext","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  return @contents[\"#{context}\\u0004#{id}\"][0]\nrescue KeyError\n  return id\nend"}}],"macros":[],"types":[]},{"html_id":"Lens/Gettext/MOBackend","path":"Gettext/MOBackend.html","kind":"struct","full_name":"Gettext::MOBackend","name":"MOBackend","abstract":false,"superclass":{"html_id":"Lens/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"Lens/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"Lens/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/gettext/mo/backend.cr","line_number":9,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/mo/backend.cr#L9"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"BE_MAGIC","name":"BE_MAGIC","value":"3725722773_i64","doc":null,"summary":null},{"id":"LE_MAGIC","name":"LE_MAGIC","value":"2500072158_i64","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Gettext","kind":"module","full_name":"Gettext","name":"Gettext"},"doc":"The backend for Gettext's MO files. This class contains methods to parse and interact with them.\n\nSimilar to the Gettext module from Python, feel free to subclass and override the `#parse` method\nto create a backend for other .mo files. However, please consider opening a PR and adding it directly\nto lens instead!","summary":"<p>The backend for Gettext's MO files.</p>","class_methods":[],"constructors":[{"html_id":"new(locale_directory_path:String)-class-method","name":"new","doc":"Create a new MO backend instance that reads from the given locale directory path\n\n```\nGettext::MOBackend.new(\"locales\")\n```","summary":"<p>Create a new MO backend instance that reads from the given locale directory path</p>","abstract":false,"args":[{"name":"locale_directory_path","doc":null,"default_value":"","external_name":"locale_directory_path","restriction":"String"}],"args_string":"(locale_directory_path : String)","args_html":"(locale_directory_path : String)","location":{"filename":"src/backend/gettext/mo/backend.cr","line_number":18,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/mo/backend.cr#L18"},"def":{"name":"new","args":[{"name":"locale_directory_path","doc":null,"default_value":"","external_name":"locale_directory_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(locale_directory_path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"create:Hash(String,Catalogue)-instance-method","name":"create","doc":"Create message catalogue from the loaded locale files.\n\nThis is the equivalent to `parse` and is only here for compatibility with `Gettext::POBackend`\n\nThis is returned as a mapping of the language code to the catalogue\nin which the language code is taken from the `Language` header. If\nnone can be found then the mo file name is used as a fallback.\n\n```\nbackend = Gettext::MOBackend.new(\"locales\")\nbackend.create # => Hash(String, Catalogue)\n```","summary":"<p>Create message catalogue from the loaded locale files.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Catalogue)","args_html":" : Hash(String, <a href=\"../Gettext/Catalogue.html\">Catalogue</a>)","location":{"filename":"src/backend/gettext/mo/backend.cr","line_number":153,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/mo/backend.cr#L153"},"def":{"name":"create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Catalogue)","visibility":"Public","body":"return self.parse"}},{"html_id":"parse:Hash(String,Catalogue)-instance-method","name":"parse","doc":"Parse gettext mo files into message catalogues.\n\nThis is returned as a mapping of the language code to the catalogue\nin which the language code is taken from the `Language` header. If\nnone can be found then the mo file name is used as a fallback.\n\n```\nbackend = Gettext::MOBackend.new(\"locales\")\nbackend.parse # => Hash(String, Catalogue)\n```","summary":"<p>Parse gettext mo files into message catalogues.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Catalogue)","args_html":" : Hash(String, <a href=\"../Gettext/Catalogue.html\">Catalogue</a>)","location":{"filename":"src/backend/gettext/mo/backend.cr","line_number":44,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/mo/backend.cr#L44"},"def":{"name":"parse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Catalogue)","visibility":"Public","body":"locale_catalogues = {} of String => Catalogue\npreprocessed_messages = {} of String => Hash(String, Hash(Int8, String))\n@_source.each do |file_name, io|\n  messages = {} of String => Hash(Int8, String)\n  case version = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n  when LE_MAGIC\n    endianness = IO::ByteFormat::LittleEndian\n  when BE_MAGIC\n    endianness = IO::ByteFormat::BigEndian\n  else\n    raise(\"Invalid magic\")\n  end\n  version, msgcount, raw_offset, trans_offset = Array.new(4) do |i|\n    io.read_bytes(UInt32, endianness)\n  end\n  if !({0, 1}.includes?(version >> 16))\n    raise(\"Unsupported version\")\n  end\n  msgcount.times do |i|\n    io.seek(raw_offset + (i * 8))\n    mlen, moff = Array.new(2) do |i|\n      io.read_bytes(UInt32, endianness)\n    end\n    io.seek(trans_offset + (i * 8))\n    tlen, toff = Array.new(2) do |i|\n      io.read_bytes(UInt32, endianness)\n    end\n    io.seek(moff)\n    msg = Bytes.new(mlen)\n    io.read_utf8(msg)\n    io.seek(toff)\n    tmsg = Bytes.new(tlen)\n    io.read_utf8(tmsg)\n    if msg.includes?(0)\n      msgid, plural_msgid = (String.new(msg)).split(\"\\u0000\")\n      tmsg = (String.new(tmsg)).split(\"\\u0000\")\n      translated_hash = {} of Int8 => String\n      tmsg.each_with_index do |msg, i|\n        translated_hash[i.to_i8] = msg\n      end\n      messages[msgid] = translated_hash\n      messages[plural_msgid] = translated_hash\n    else\n      messages[String.new(msg)] = {0.to_i8 => String.new(tmsg)}\n    end\n  end\n  preprocessed_messages[file_name] = messages\nend\nlocale_catalogues = self.create_catalogues_and_merge_duplicate_files(preprocessed_messages)\nreturn locale_catalogues\n"}}],"macros":[],"types":[]},{"html_id":"Lens/Gettext/PluralForm","path":"Gettext/PluralForm.html","kind":"module","full_name":"Gettext::PluralForm","name":"PluralForm","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/backend/gettext/plural-forms/ast.cr","line_number":5,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/ast.cr#L5"},{"filename":"src/backend/gettext/plural-forms/interpreter.cr","line_number":6,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/interpreter.cr#L6"},{"filename":"src/backend/gettext/plural-forms/lexer.cr","line_number":13,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/lexer.cr#L13"},{"filename":"src/backend/gettext/plural-forms/parser.cr","line_number":6,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/parser.cr#L6"},{"filename":"src/backend/gettext/plural-forms/tokens.cr","line_number":4,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/tokens.cr#L4"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"Lens/Gettext/PluralForm","kind":"module","full_name":"Gettext::PluralForm","name":"PluralForm"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Gettext","kind":"module","full_name":"Gettext","name":"Gettext"},"doc":"Module for handling the plural-forms header used by Gettext\n\nYou should **never** have to deal with this module. The Gettext backends automatically\ncalls the required methods here for interpreting plural-forms.\n\n[Everything in here is based on the tree-walk interpreter from\ncrafting interpreters](https://www.craftinginterpreters.com/a-tree-walk-interpreter.html)\n\nThanks Robert Nystrom!","summary":"<p>Module for handling the plural-forms header used by Gettext</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Lens/Gettext/PluralForm/Interpreter","path":"Gettext/PluralForm/Interpreter.html","kind":"class","full_name":"Gettext::PluralForm::Interpreter","name":"Interpreter","abstract":false,"superclass":{"html_id":"Lens/Gettext/PluralForm/ExpressionVisitor","kind":"class","full_name":"Gettext::PluralForm::ExpressionVisitor","name":"ExpressionVisitor"},"ancestors":[{"html_id":"Lens/Gettext/PluralForm/ExpressionVisitor","kind":"class","full_name":"Gettext::PluralForm::ExpressionVisitor","name":"ExpressionVisitor"},{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/gettext/plural-forms/interpreter.cr","line_number":12,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/interpreter.cr#L12"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Gettext/PluralForm","kind":"module","full_name":"Gettext::PluralForm","name":"PluralForm"},"doc":"A interpreter that calculates the plural-form to take from syntax trees representing the plural-form expression.\n\n[Based on this interpreter from crafting interpreters](https://craftinginterpreters.com/evaluating-expressions.html)","summary":"<p>A interpreter that calculates the plural-form to take from syntax trees representing the plural-form expression.</p>","class_methods":[],"constructors":[{"html_id":"new(expressions:Array(Expression))-class-method","name":"new","doc":"Creates an interpreter with the given expression trees from the `PluralForm::Parser` as input.\n\n```\nplural_form_scanner = Gettext::PluralForm::Scanner.new(\"nplurals=2; plural=(n > 1);\")\nexpressions = Gettext::PluralForm::Parser.new(plural_form_scanner.scan).parse\ninterpreter = Gettext::PluralForm::Interpreter.new(expressions)\ninterpreter.interpret(1)  # => 0\ninterpreter.interpret(50) # => 1\n```","summary":"<p>Creates an interpreter with the given expression trees from the <code><a href=\"../../Gettext/PluralForm/Parser.html\">PluralForm::Parser</a></code> as input.</p>","abstract":false,"args":[{"name":"expressions","doc":null,"default_value":"","external_name":"expressions","restriction":"Array(Expression)"}],"args_string":"(expressions : Array(Expression))","args_html":"(expressions : Array(Expression))","location":{"filename":"src/backend/gettext/plural-forms/interpreter.cr","line_number":22,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/interpreter.cr#L22"},"def":{"name":"new","args":[{"name":"expressions","doc":null,"default_value":"","external_name":"expressions","restriction":"Array(Expression)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(expressions)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"interpret(number)-instance-method","name":"interpret","doc":"Calculates which plural form to use for the given number","summary":"<p>Calculates which plural form to use for the given number</p>","abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":""}],"args_string":"(number)","args_html":"(number)","location":{"filename":"src/backend/gettext/plural-forms/interpreter.cr","line_number":164,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/interpreter.cr#L164"},"def":{"name":"interpret","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.assign_plural(number)\n@expressions.each do |expr|\n  self.evaluate(expr)\nend\nreturn @environment[\"plural\"]\n"}}],"macros":[],"types":[]},{"html_id":"Lens/Gettext/PluralForm/Parser","path":"Gettext/PluralForm/Parser.html","kind":"class","full_name":"Gettext::PluralForm::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/gettext/plural-forms/parser.cr","line_number":13,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/parser.cr#L13"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Gettext/PluralForm","kind":"module","full_name":"Gettext::PluralForm","name":"PluralForm"},"doc":"Parser for generating plural-form expression ASTs out of an array of tokens\n\n\n[Based on this parser from crafting interpreters](https://www.craftinginterpreters.com/parsing-expressions.html)","summary":"<p>Parser for generating plural-form expression ASTs out of an array of tokens</p>","class_methods":[],"constructors":[{"html_id":"new(tokens)-class-method","name":"new","doc":"Creates a new parser instance with the array of tokens from the `PluralForm::Scanner` as input.\n\n```\nplural_form_scanner = Gettext::PluralForm::Scanner.new(\"nplurals=2; plural=(n > 1);\")\ntokens = plural_form_scanner.scan\nplural_form_parser = Gettext::PluralForm::Parser.new(tokens)\n```","summary":"<p>Creates a new parser instance with the array of tokens from the <code><a href=\"../../Gettext/PluralForm/Scanner.html\">PluralForm::Scanner</a></code> as input.</p>","abstract":false,"args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""}],"args_string":"(tokens)","args_html":"(tokens)","location":{"filename":"src/backend/gettext/plural-forms/parser.cr","line_number":26,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/parser.cr#L26"},"def":{"name":"new","args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(tokens)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"parse-instance-method","name":"parse","doc":"Parse an array of tokens into abstract syntax trees that represents a plural-form expression (C)\n\n```\nplural_form_scanner = Gettext::PluralForm::Scanner.new(\"nplurals=2; plural=(n > 1);\")\ntokens = plural_form_scanner.scan\nplural_form_parser = Gettext::PluralForm::Parser.new(tokens)\nplural_form_parser.parse # => Array(Expressions)\n```","summary":"<p>Parse an array of tokens into abstract syntax trees that represents a plural-form expression (C)</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/backend/gettext/plural-forms/parser.cr","line_number":195,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/parser.cr#L195"},"def":{"name":"parse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"expressions = [] of Expression\nself.token_reader do |token|\n  expressions << self.expression\nend\nreturn expressions\n"}}],"macros":[],"types":[]},{"html_id":"Lens/Gettext/PluralForm/Scanner","path":"Gettext/PluralForm/Scanner.html","kind":"class","full_name":"Gettext::PluralForm::Scanner","name":"Scanner","abstract":false,"superclass":{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/gettext/plural-forms/lexer.cr","line_number":19,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/lexer.cr#L19"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Gettext/PluralForm","kind":"module","full_name":"Gettext::PluralForm","name":"PluralForm"},"doc":"A scanner to tokenize a subset of C's grammar\n\nBased on https://www.craftinginterpreters.com/scanning.html","summary":"<p>A scanner to tokenize a subset of C's grammar</p>","class_methods":[],"constructors":[{"html_id":"new(source:String)-class-method","name":"new","doc":"Creates a new scanner instance with the given source\n\n```\nplural_form_scanner = Gettext::PluralForm::Scanner.new(\"nplurals=2; plural=(n > 1);\")\n```","summary":"<p>Creates a new scanner instance with the given source</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/backend/gettext/plural-forms/lexer.cr","line_number":25,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/lexer.cr#L25"},"def":{"name":"new","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"scan-instance-method","name":"scan","doc":"Tokenizes the subset of C's grammar needed for parsing plural-forms\n\n```\nplural_form_scanner = Gettext::PluralForm::Scanner.new(\"nplurals=2; plural=(n > 1);\")\ntokens = plural_form_scanner.scan # => Array(Tokens)\n```","summary":"<p>Tokenizes the subset of C's grammar needed for parsing plural-forms</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/backend/gettext/plural-forms/lexer.cr","line_number":38,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/plural-forms/lexer.cr#L38"},"def":{"name":"scan","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while !self.at_end_of_source?\n  self.scan_token\nend\nreturn @tokens\n"}}],"macros":[],"types":[]}]},{"html_id":"Lens/Gettext/POBackend","path":"Gettext/POBackend.html","kind":"struct","full_name":"Gettext::POBackend","name":"POBackend","abstract":false,"superclass":{"html_id":"Lens/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"Lens/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"Lens/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/backend/gettext/po/backend.cr","line_number":5,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/backend.cr#L5"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Gettext","kind":"module","full_name":"Gettext","name":"Gettext"},"doc":"The backend for Gettext's PO files. This class contains methods to parse and interact with them.","summary":"<p>The backend for Gettext's PO files.</p>","class_methods":[],"constructors":[{"html_id":"new(locale_directory_path:String)-class-method","name":"new","doc":"Create a new PO backend instance that reads from the given locale directory path\n\nNOTE\nAny files that has the same name is assumed to be apart of the same locale since we don't know the\nspecific language header for them yet.\n\n```\nGettext::POBackend.new(\"locales\")\n```","summary":"<p>Create a new PO backend instance that reads from the given locale directory path</p>","abstract":false,"args":[{"name":"locale_directory_path","doc":null,"default_value":"","external_name":"locale_directory_path","restriction":"String"}],"args_string":"(locale_directory_path : String)","args_html":"(locale_directory_path : String)","location":{"filename":"src/backend/gettext/po/backend.cr","line_number":15,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/backend.cr#L15"},"def":{"name":"new","args":[{"name":"locale_directory_path","doc":null,"default_value":"","external_name":"locale_directory_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(locale_directory_path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"create:Hash(String,Catalogue)-instance-method","name":"create","doc":"Create message catalogue from the loaded locale files\n\nShortcut to avoid calling `scan` and `parse`\n\nThis is returned as a mapping of the language code to the catalogue\nin which the language code is taken from the `Language` header. If\nnone can be found then the po file name is used as a fallback.\n\n```\nbackend = Gettext::POBackend.new(\"locales\")\nbackend.create # => Hash(String, Catalogue)\n```","summary":"<p>Create message catalogue from the loaded locale files</p>","abstract":false,"args":[],"args_string":" : Hash(String, Catalogue)","args_html":" : Hash(String, <a href=\"../Gettext/Catalogue.html\">Catalogue</a>)","location":{"filename":"src/backend/gettext/po/backend.cr","line_number":125,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/backend.cr#L125"},"def":{"name":"create","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Catalogue)","visibility":"Public","body":"return self.parse(self.scan)"}},{"html_id":"parse(token_hash):Hash(String,Catalogue)-instance-method","name":"parse","doc":"Parse tokens into message catalogues\n\nThis is returned as a mapping of the language code to the catalogue\nin which the language code is taken from the `Language` header. If\nnone can be found then the po file name is used as a fallback.\n\n```\nbackend = Gettext::POBackend.new(\"locales\")\nbackend.parse(backend.scan) # => Hash(String, Catalogue)\n```","summary":"<p>Parse tokens into message catalogues</p>","abstract":false,"args":[{"name":"token_hash","doc":null,"default_value":"","external_name":"token_hash","restriction":""}],"args_string":"(token_hash) : Hash(String, Catalogue)","args_html":"(token_hash) : Hash(String, <a href=\"../Gettext/Catalogue.html\">Catalogue</a>)","location":{"filename":"src/backend/gettext/po/backend.cr","line_number":62,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/backend.cr#L62"},"def":{"name":"parse","args":[{"name":"token_hash","doc":null,"default_value":"","external_name":"token_hash","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Catalogue)","visibility":"Public","body":"locale_catalogues = {} of String => Catalogue\npreprocessed_messages = {} of String => Hash(String, Hash(Int8, String))\ntoken_hash.each do |file_name, contents|\n  parser = POParser.new(contents)\n  messages = parser.parse\n  preprocessed_messages[file_name] = messages\nend\nlocale_catalogues = self.create_catalogues_and_merge_duplicate_files(preprocessed_messages)\nreturn locale_catalogues\n"}},{"html_id":"scan:Hash(String,Array(Token))-instance-method","name":"scan","doc":"Scans loaded locale data into tokens parsing.\n\nReturned as a mapping of the po file name to the token array\n\n```\nbackend = Gettext::POBackend.new(\"locales\")\nbackend.scan # => Array(Token)\n```","summary":"<p>Scans loaded locale data into tokens parsing.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Array(Token))","args_html":" : Hash(String, Array(Token))","location":{"filename":"src/backend/gettext/po/backend.cr","line_number":40,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/backend/gettext/po/backend.cr#L40"},"def":{"name":"scan","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Array(Token))","visibility":"Public","body":"tokenized_locales = {} of String => Array(Token)\n@_source.each do |file_name, contents|\n  scanner = POScanner.new(file_name, contents)\n  tokens = scanner.scan\n  tokenized_locales[file_name] = tokens\nend\nreturn tokenized_locales\n"}}],"macros":[],"types":[]}]},{"html_id":"Lens/Lens","path":"Lens.html","kind":"module","full_name":"Lens","name":"Lens","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/lens.cr","line_number":3,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/lens.cr#L3"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"html_id":"fetch_backend(fmt:Formats)-class-method","name":"fetch_backend","doc":"Returns the backend for the selected format\n\nPlease note that each backend has a different API for translations.\n\n```\nrequire \"lens\"\n\nLens.fetch_backend(Lens::Formats::GettextPO).as(Gettext::POBackend.class)      # => Gettext::POBackend\nLens.fetch_backend(Lens::Formats::GettextMO).as(Gettext::MOBackend.class)      # => Gettext::MOBackend\nLens.fetch_backend(Lens::Formats::CrystalI18nYAML).as(CrystalI18n::I18n.class) # => CrystalI18n::I18n\n```\n","summary":"<p>Returns the backend for the selected format</p>\n<p><span class=\"flag red\">DEPRECATED</span>  Please just call the respective backends instead!</p>","abstract":false,"args":[{"name":"fmt","doc":null,"default_value":"","external_name":"fmt","restriction":"Formats"}],"args_string":"(fmt : Formats)","args_html":"(fmt : <a href=\"Lens/Formats.html\">Formats</a>)","location":{"filename":"src/lens.cr","line_number":33,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/lens.cr#L33"},"def":{"name":"fetch_backend","args":[{"name":"fmt","doc":null,"default_value":"","external_name":"fmt","restriction":"Formats"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case fmt\nwhen .gettext_po?\n  Gettext::POBackend\nwhen .gettext_mo?\n  Gettext::MOBackend\nwhen .crystal_i18n_yaml?\n  CrystalI18n::I18n\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Lens/Lens/Formats","path":"Lens/Formats.html","kind":"enum","full_name":"Lens::Formats","name":"Formats","abstract":false,"superclass":null,"ancestors":[{"html_id":"Lens/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"Lens/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"Lens/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lens.cr","line_number":14,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/lens.cr#L14"}],"repository_name":"Lens","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"GettextPO","name":"GettextPO","value":"0","doc":null,"summary":null},{"id":"GettextMO","name":"GettextMO","value":"1","doc":null,"summary":null},{"id":"CrystalI18nYAML","name":"CrystalI18nYAML","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/Lens","kind":"module","full_name":"Lens","name":"Lens"},"doc":"List of supported formats within lens.\n\nFor their respective documentations see:\n`Gettext::POBackend`\n`Gettext::MOBackend`\n`CrystalI18n::I18n`\n","summary":"<p>List of supported formats within lens.</p>\n<p><span class=\"flag red\">DEPRECATED</span>  Please just call the respective backends instead of using this enum!</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"crystal_i18n_yaml?-instance-method","name":"crystal_i18n_yaml?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/lens.cr","line_number":17,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/lens.cr#L17"},"def":{"name":"crystal_i18n_yaml?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == CrystalI18nYAML"}},{"html_id":"gettext_mo?-instance-method","name":"gettext_mo?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/lens.cr","line_number":16,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/lens.cr#L16"},"def":{"name":"gettext_mo?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GettextMO"}},{"html_id":"gettext_po?-instance-method","name":"gettext_po?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/lens.cr","line_number":15,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/lens.cr#L15"},"def":{"name":"gettext_po?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GettextPO"}}],"macros":[],"types":[]}]},{"html_id":"Lens/LensExceptions","path":"LensExceptions.html","kind":"module","full_name":"LensExceptions","name":"LensExceptions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/helpers/exceptions.cr","line_number":2,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/helpers/exceptions.cr#L2"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Contains all the exceptions lens would throw","summary":"<p>Contains all the exceptions lens would throw</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Lens/LensExceptions/LexError","path":"LensExceptions/LexError.html","kind":"class","full_name":"LensExceptions::LexError","name":"LexError","abstract":false,"superclass":{"html_id":"Lens/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"Lens/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/helpers/exceptions.cr","line_number":4,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/helpers/exceptions.cr#L4"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/LensExceptions","kind":"module","full_name":"LensExceptions","name":"LensExceptions"},"doc":"Exception thrown when an error occurrs during lexing.","summary":"<p>Exception thrown when an error occurrs during lexing.</p>","class_methods":[],"constructors":[{"html_id":"new(file_name,message,full_line:String,line:Int,column:Int)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"file_name","doc":null,"default_value":"","external_name":"file_name","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""},{"name":"full_line","doc":null,"default_value":"","external_name":"full_line","restriction":"String"},{"name":"line","doc":null,"default_value":"","external_name":"line","restriction":"Int"},{"name":"column","doc":null,"default_value":"","external_name":"column","restriction":"Int"}],"args_string":"(file_name, message, full_line : String, line : Int, column : Int)","args_html":"(file_name, message, full_line : String, line : Int, column : Int)","location":{"filename":"src/helpers/exceptions.cr","line_number":5,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/helpers/exceptions.cr#L5"},"def":{"name":"new","args":[{"name":"file_name","doc":null,"default_value":"","external_name":"file_name","restriction":""},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""},{"name":"full_line","doc":null,"default_value":"","external_name":"full_line","restriction":"String"},{"name":"line","doc":null,"default_value":"","external_name":"line","restriction":"Int"},{"name":"column","doc":null,"default_value":"","external_name":"column","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"error_message = String.build do |str|\n  str << \"An error occurred when scanning '#{file_name}' at Line #{line}:\\n\"\n  str << \"#{full_line.strip(\"\\n\")}\\n\"\n  str << \"#{\" \" * (column - 1)} ^\\n\"\n  puts(column, full_line.size, column >= full_line.size)\n  if column >= full_line.size\n    str << \"#{message} at column #{column}\"\n  else\n    str << \"#{message}: '#{full_line[column]}' at column #{column}\\n\"\n  end\nend\ninstance = LexError.allocate\ninstance.initialize(error_message)\nreturn instance\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"Lens/LensExceptions/MissingTranslation","path":"LensExceptions/MissingTranslation.html","kind":"class","full_name":"LensExceptions::MissingTranslation","name":"MissingTranslation","abstract":false,"superclass":{"html_id":"Lens/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"Lens/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/helpers/exceptions.cr","line_number":31,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/helpers/exceptions.cr#L31"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/LensExceptions","kind":"module","full_name":"LensExceptions","name":"LensExceptions"},"doc":"Exception thrown when an translation is messing. Only applies to certain formats by default","summary":"<p>Exception thrown when an translation is messing.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"Lens/LensExceptions/ParseError","path":"LensExceptions/ParseError.html","kind":"class","full_name":"LensExceptions::ParseError","name":"ParseError","abstract":false,"superclass":{"html_id":"Lens/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"Lens/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"Lens/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Lens/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/helpers/exceptions.cr","line_number":27,"url":"https://github.com/syeopite/lens/tree/v0.1.0/src/helpers/exceptions.cr#L27"}],"repository_name":"Lens","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Lens/LensExceptions","kind":"module","full_name":"LensExceptions","name":"LensExceptions"},"doc":"Exception thrown when an error occurs during parsing","summary":"<p>Exception thrown when an error occurs during parsing</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}})